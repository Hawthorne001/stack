# Partial: base/head
# Usage of partial function 'head' for lists
[[ignore]]
  id = "OBS-STAN-0001-1XF2BN-48:1"
# ✦ Category:      #Partial #List
# ✦ File:          src\Stack\Storage\Project.hs
#
#   48 ┃ share [ mkPersist sqlSettings

# Partial: base/head
# Usage of partial function 'head' for lists
[[ignore]]
  id = "OBS-STAN-0001-0pmobG-87:1"
# ✦ Category:      #Partial #List
# ✦ File:          src\Stack\Storage\User.hs
#
#   87 ┃ share [ mkPersist sqlSettings

# Partial: base/last
# On Windows
# To exclude .stack-work\dist\<hash>\build\stack\autogen\Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work\\dist"
  type = "Exclude"

# Partial: base/last
# On Unix-like operating systems
# To exclude .stack-work/dist/<hash>/build/stack/autogen/Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work/dist"
  type = "Exclude"

# Infinite: base/reverse
# Usage of the 'reverse' function that hangs on infinite lists
# Stack uses Data.List.reverse in many places
[[check]]
  id = "STAN-0101"
  scope = "all"
  type = "Exclude"

# Infinite: base/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-luLR/n-525:30"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\New.hs
#
#  524 ┃
#  525 ┃   let isPkgSpec f = ".cabal" `L.isSuffixOf` f || "package.yaml" `L.isSuffixOf` f
#  526 ┃                              ^^^^^^^^^^^^^^

# Infinite: base/isSuffixOf
# Usage of the 'isSuffixOf' function that hangs on infinite lists
[[ignore]]
  id = "OBS-STAN-0102-luLR/n-525:65"
# ✦ Category:      #Infinite #List
# ✦ File:          src\Stack\New.hs
#
#  524 ┃
#  525 ┃   let isPkgSpec f = ".cabal" `L.isSuffixOf` f || "package.yaml" `L.isSuffixOf` f
#  526 ┃                                                                 ^^^^^^^^^^^^^^

# Infinite: base/length
# Usage of the 'length' function that hangs on infinite lists
# Stack uses Data.List.length in many places
[[check]]
  id = "STAN-0103"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-erw24B-1031:3"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Build\ExecuteEnv.hs
#
#  1030 ┃
#  1031 ┃   S8.pack . formatTime defaultTimeLocale "%Y-%m-%dT%H:%M:%S%6Q"
#  1032 ┃   ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-tuE+RG-236:24"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Build\ExecutePackage.hs
#
#   235 ┃
#   236 ┃   newConfigFileRoot <- S8.pack . toFilePath <$> view configFileRootL
#   237 ┃                        ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-389:17"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Init.hs
#
#  388 ┃
#  389 ┃   commentHelp = BC.pack .  intercalate "\n" . map commentLine
#  390 ┃                 ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-406:26"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Init.hs
#
#  405 ┃
#  406 ┃         <> B.byteString (BC.pack $ concat
#  407 ┃                          ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-axv1UG-354:32"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Docker.hs
#
#  353 ┃
#  354 ┃     hashRepoName = Hash.hash . BS.pack . takeWhile (\c -> c /= ':' && c /= '@')
#  355 ┃                                ^^^^^^^

# Data types with non-strict fields
# Defining lazy fields in data types can lead to unexpected space leaks
# Stack uses lazy fields in many places
[[check]]
  id = "STAN-0206"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\PackageDump.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/PackageDump.hs"
  type = "Exclude"

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-5rtOmw-460:33"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\Constants.hs
#
#  459 ┃
#  460 ┃ setupGhciShimCode = byteString $(do
#  461 ┃     path <- makeRelativeToProject "src/setup-shim/StackSetupShim.hs"
#  462 ┃     embedFile path)
#  463 ┃

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-FNS1cF-59:17"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\BuildOpts.hs
#
#   58 ┃
#   59 ┃   buildMonoid = undefined :: BuildOptsMonoid
#   60 ┃                 ^^^^^^^^^

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-FNS1cF-71:14"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
# ✦ Category:      #Unsafe #AntiPattern
# ✦ File:          src\Stack\BuildOpts.hs
#
#    70 ┃
#    71 ┃   toMonoid = undefined :: TestOptsMonoid
#    72 ┃              ^^^^^^^^^

# Anti-pattern: Pattern matching on '_'
# Pattern matching on '_' for sum types can create maintainability issues
# Stack uses pattern matching on '_' in many places.
[[check]]
  id = "STAN-0213"
  scope = "all"
  type = "Exclude"

# Big tuples
# Using tuples of big size (>= 4) can decrease code readability
# In serveral places Stack uses 4-tuples and in one place Stack uses a
# 5-tuple.
[[check]]
  id = "STAN-0302"
  scope = "all"
  type = "Exclude"
