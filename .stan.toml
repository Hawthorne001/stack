# Partial: base/last
# On Windows
# To exclude .stack-work\dist\<hash>\build\stack\autogen\Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work\\dist"
  type = "Exclude"

# Partial: base/last
# On Unix-like operating systems
# To exclude .stack-work/dist/<hash>/build/stack/autogen/Paths_stack.hs
[[check]]
  id = "STAN-0004"
  directory = ".stack-work/dist"
  type = "Exclude"

# Partial: base/!!
[[check]]
  id = "STAN-0005"
  scope = "all"
  type = "Exclude"

# Partial: base/minimum
[[check]]
  id = "STAN-0014"
  scope = "all"
  type = "Exclude"

# Partial: base/minimumBy
[[check]]
  id = "STAN-0016"
  scope = "all"
  type = "Exclude"

# Partial: base/fromList
[[check]]
  id = "STAN-0020"
  scope = "all"
  type = "Exclude"

# Infinite: base/reverse
[[check]]
  id = "STAN-0101"
  scope = "all"
  type = "Exclude"

# Infinite: base/isSuffixOf
[[check]]
  id = "STAN-0102"
  scope = "all"
  type = "Exclude"

# Infinite: base/length
[[check]]
  id = "STAN-0103"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-fki0nd-1098:21"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
#  ✦ Category:      #AntiPattern
#  ✦ File:          src\Stack\Build\Execute.hs
#
#  1097 ┃
#  1098 ┃   newProjectRoot <- S8.pack . toFilePath <$> view projectRootL
#  1099 ┃                     ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-fki0nd-2615:3"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Build\Execute.hs
# 2614 ┃
# 2615 ┃   S8.pack . formatTime defaultTimeLocale "%Y-%m-%dT%H:%M:%S%6Q"
# 2616 ┃   ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-379:17"
# ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
# ✦ Category:      #AntiPattern
# ✦ File:          src\Stack\Init.hs
#  378 ┃
#  379 ┃   commentHelp = BC.pack .  intercalate "\n" . map commentLine
#  380 ┃                 ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-hTeu0Y-396:26"
#  ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
#  ✦ Category:      #AntiPattern
#  ✦ File:          src\Stack\Init.hs
#
#   395 ┃
#   396 ┃         <> B.byteString (BC.pack $ concat
#   397 ┃                          ^^^^^^^

# Anti-pattern: Data.ByteString.Char8.pack
[[ignore]]
  id = "OBS-STAN-0203-axv1UG-346:32"
#  ✦ Description:   Usage of 'pack' function that doesn't handle Unicode characters
#  ✦ Category:      #AntiPattern
#  ✦ File:          src\Stack\Docker.hs
#
#   346 ┃
#   347 ┃     hashRepoName = Hash.hash . BS.pack . takeWhile (\c -> c /= ':' && c /= '@')
#   348 ┃                                ^^^^^^^

# Data types with non-strict fields
# Defining lazy fields in data types can lead to unexpected space leaks
# Stack uses lazy fields in many places
[[check]]
  id = "STAN-0206"
  scope = "all"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/ConstructPlan.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\Build\\Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/Build/Execute.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Windows
[[check]]
  id = "STAN-0208"
  file = "src\\Stack\\PackageDump.hs"
  type = "Exclude"

# Anti-pattern: Slow 'length' for Text
# On Unix-like operating systems
[[check]]
  id = "STAN-0208"
  file = "src/Stack/PackageDump.hs"
  type = "Exclude"

# Anti-pattern: unsafe functions
[[ignore]]
  id = "OBS-STAN-0212-5rtOmw-477:33"
# ✦ Description:   Usage of unsafe functions breaks referential transparency
#  ✦ Category:      #Unsafe #AntiPattern
#  ✦ File:          src\Stack\Constants.hs
#
#   476 ┃
#   477 ┃ setupGhciShimCode = byteString $(do
#   478 ┃     path <- makeRelativeToProject "src/setup-shim/StackSetupShim.hs"
#   479 ┃     embedFile path)
#   480 ┃

# Anti-pattern: Pattern matching on '_'
# Pattern matching on '_' for sum types can create maintainability issues
# Stack uses pattern matching on '_' in many places.
[[check]]
  id = "STAN-0213"
  scope = "all"
  type = "Exclude"

# Big tuples
# Using tuples of big size (>= 4) can decrease code readability
# In a number of places Stack uses 4-tuples and in one place Stack uses a
# 5-tuple.
[[check]]
  id = "STAN-0302"
  scope = "all"
  type = "Exclude"
